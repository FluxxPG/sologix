import { NextResponse } from 'next/server';

export function middleware(request) {
  // Define protected paths that require authentication
  const protectedPaths = [
    '/afterleadingpage',
    '/profile',
    '/cart',
    '/payment',
    '/payment-history'
  ];
  
  // Define public paths that should redirect to dashboard if already logged in
  const authPaths = ['/login', '/register', '/forgot-password'];
  
  const { pathname } = request.nextUrl;
  
  // Get the user session from cookies
  const userSession = request.cookies.get('userSession')?.value;
  
  // Check if the current path is protected
  const isProtectedPath = protectedPaths.some(path => 
    pathname === path || pathname.startsWith(`${path}/`)
  );
  
  // Check if the current path is an auth path (login, register, etc.)
  const isAuthPath = authPaths.some(path => 
    pathname === path || pathname.startsWith(`${path}/`)
  );

  // If the user is not authenticated and trying to access a protected route
  if (!userSession && isProtectedPath) {
    // Store the intended URL to redirect back after login
    const loginUrl = new URL('/login', request.url);
    loginUrl.searchParams.set('redirect', pathname);
    return NextResponse.redirect(loginUrl);
  }

  // If the user is authenticated and trying to access an auth route
  if (userSession && isAuthPath) {
    // Redirect to the intended URL or dashboard
    const redirectTo = new URL(request.nextUrl.searchParams.get('redirect') || '/afterleadingpage', request.url);
    return NextResponse.redirect(redirectTo);
  }

  // For all other cases, continue with the request
  return NextResponse.next();
}

export const config = {
  matcher: [
    // Match all request paths except for the ones starting with:
    // - api (API routes)
    // - _next/static (static files)
    // - _next/image (image optimization files)
    // - favicon.ico (favicon file)
    // - public folder
    '/((?!api|_next/static|_next/image|favicon.ico|images/).*)',
  ],
};
